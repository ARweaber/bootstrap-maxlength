/* ========================================================== 
 * 
 * bootstrap-maxlength.js v 1.5.5 
 * Copyright 2014 Maurizio Napoleoni @mimonap
 * Licensed under MIT License
 * URL: https://github.com/mimo84/bootstrap-maxlength/blob/master/LICENSE
 *
 * ========================================================== */

(function (e) { "use strict"; if (!e.event.special.destroyed) { e.event.special.destroyed = { remove: function (e) { if (e.handler) { e.handler() } } } } e.fn.extend({ maxlength: function (t, n) { function s(e) { var n = e.val(); if (t.twoCharLinebreak) { n = n.replace(/\r(?!\n)|\n(?!\r)/g, "\r\n") } else { n = n.replace(new RegExp("\r?\n", "g"), "\n") } var r = 0; if (t.utf8) { r = u(n) } else { r = n.length } return r } function o(e, n) { var r = e.val(); var i = 0; if (t.twoCharLinebreak) { r = r.replace(/\r(?!\n)|\n(?!\r)/g, "\r\n"); if (r.substr(r.length - 1) === "\n" && r.length % 2 === 1) { i = 1 } } e.val(r.substr(0, n - i)) } function u(e) { var t = 0; for (var n = 0; n < e.length; n++) { var r = e.charCodeAt(n); if (r < 128) { t++ } else if (r > 127 && r < 2048) { t = t + 2 } else { t = t + 3 } } return t } function a(e, n, r) { var i = true; if (!t.alwaysShow && r - s(e) > n) { i = false } return i } function f(e, t) { var n = t - s(e); return n } function l(e) { e.css({ display: "block" }) } function c(e) { e.css({ display: "none" }) } function h(e, n) { var r = ""; if (t.message) { r = t.message.replace("%charsTyped%", n).replace("%charsRemaining%", e - n).replace("%charsTotal%", e) } else { if (t.preText) { r += t.preText } if (!t.showCharsTyped) { r += e - n } else { r += n } if (t.showMaxLength) { r += t.separator + e } if (t.postText) { r += t.postText } } return r } function p(e, n, r, i) { i.html(h(r, r - e)); if (e > 0) { if (a(n, t.threshold, r)) { l(i.removeClass(t.limitReachedClass).addClass(t.warningClass)) } else { c(i) } } else { l(i.removeClass(t.warningClass).addClass(t.limitReachedClass)) } if (t.allowOverMax) { if (e < 0) { n.addClass("overmax") } else { n.removeClass("overmax") } } } function d(t) { var n = t[0]; return e.extend({}, typeof n.getBoundingClientRect === "function" ? n.getBoundingClientRect() : { width: n.offsetWidth, height: n.offsetHeight }, t.offset()) } function v(e, n) { var r = d(e), i = e.outerWidth(), s = n.outerWidth(), o = n.width(), u = n.height(); if (t.appendToParent) { r.top -= e.parent().offset().top; r.left -= e.parent().offset().left } switch (t.placement) { case "bottom": n.css({ top: r.top + r.height, left: r.left + r.width / 2 - o / 2 }); break; case "top": n.css({ top: r.top - u, left: r.left + r.width / 2 - o / 2 }); break; case "left": n.css({ top: r.top + r.height / 2 - u / 2, left: r.left - o }); break; case "right": n.css({ top: r.top + r.height / 2 - u / 2, left: r.left + r.width }); break; case "bottom-right": n.css({ top: r.top + r.height, left: r.left + r.width }); break; case "top-right": n.css({ top: r.top - u, left: r.left + i }); break; case "top-left": n.css({ top: r.top - u, left: r.left - s }); break; case "bottom-left": n.css({ top: r.top + e.outerHeight(), left: r.left - s }); break; case "centered-right": n.css({ top: r.top + u / 2, left: r.left + i - s - 3 }); break; case "bottom-right-inside": n.css({ top: r.top + r.height, left: r.left + r.width - s }); break; case "top-right-inside": n.css({ top: r.top - u, left: r.left + i - s }); break; case "top-left-inside": n.css({ top: r.top - u, left: r.left }); break; case "bottom-left-inside": n.css({ top: r.top + e.outerHeight(), left: r.left }); break } } function m(e) { var n = "maxlength"; if (t.allowOverMax) { n = "data-bs-mxl" } return e.attr(n) || e.attr("size") } var r = e("body"), i = { showOnReady: false, alwaysShow: false, threshold: 10, warningClass: "label label-success", limitReachedClass: "label label-important label-danger", separator: " / ", preText: "", postText: "", showMaxLength: true, placement: "bottom", showCharsTyped: true, validate: false, utf8: false, appendToParent: false, twoCharLinebreak: true, allowOverMax: false }; if (e.isFunction(t) && !n) { n = t; t = {} } t = e.extend(i, t); return this.each(function () { function u() { var o = h(i, "0"); i = m(n); if (!s) { s = e('<span class="bootstrap-maxlength"></span>').css({ display: "none", position: "absolute", whiteSpace: "nowrap", zIndex: 1099 }).html(o) } if (n.is("textarea")) { n.data("maxlenghtsizex", n.outerWidth()); n.data("maxlenghtsizey", n.outerHeight()); n.mouseup(function () { if (n.outerWidth() !== n.data("maxlenghtsizex") || n.outerHeight() !== n.data("maxlenghtsizey")) { v(n, s) } n.data("maxlenghtsizex", n.outerWidth()); n.data("maxlenghtsizey", n.outerHeight()) }) } if (t.appendToParent) { n.parent().append(s); n.parent().css("position", "relative") } else { r.append(s) } var u = f(n, m(n)); p(u, n, i, s); v(n, s) } var n = e(this), i, s; e(window).resize(function () { if (s) { v(n, s) } }); if (t.allowOverMax) { e(this).attr("data-bs-mxl", e(this).attr("maxlength")); e(this).removeAttr("maxlength") } if (t.showOnReady) { n.ready(function () { u() }) } else { n.focus(function () { u() }) } n.on("destroyed", function () { if (s) { s.remove() } }); n.on("blur", function () { if (s && !t.showOnReady) { s.remove() } }); n.on("input", function () { var e = m(n), r = f(n, e), u = true; if (t.validate && r < 0) { o(n, e); u = false } else { p(r, n, i, s) } if (t.placement === "bottom-right-inside" || t.placement === "top-right-inside") { v(n, s) } return u }) }) } }) })(jQuery)